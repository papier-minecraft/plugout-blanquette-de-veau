##########################
## VARIABLES
##########################

variables:
  MAVEN_OPTS: >-
    -Dhttps.protocols=TLSv1.2
    -Dmaven.repo.local=$CI_PROJECT_DIR/.m2/repository
  MAVEN_CLI_OPTS: >-
    -DskipTests
    --no-transfer-progress

##########################
## STAGE
##########################

stages:
  - build
  - test
  - deploy
  - release

##########################
## DEFAULT
##########################

default:
  image: maven:3.9.6-eclipse-temurin-17
  cache:
    key: $CI_COMMIT_REF_SLUG
    paths:
      - .m2/

##########################
## JOBS
##########################

🚜 Construction de la BlanquetteDeVeau:
  stage: build
  script: mvn $MAVEN_CLI_OPTS package

🧪 Petit test:
  stage: test
  script: mvn test
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"

🚀 Livraison de la BlanquetteDeVeau:
  stage: deploy
  variables:
    SNAPSHOT_VERSION: "true"
  script:
    - | # Passage de la version en SNAPSHOT si SNAPSHOT_VERSION est à true
      if [ "$SNAPSHOT_VERSION" == "true" ]; then
        mvn versions:set -DnewVersion=$(mvn help:evaluate -Dexpression=project.version -q -DforceStdout)-SNAPSHOT
      fi
    - mvn $MAVEN_CLI_OPTS deploy -s .gitlab/ci_settings.xml
  after_script: echo "VERSION=$(mvn help:evaluate -Dexpression=project.version -q -DforceStdout)" > .env
  rules:
    - if: $CI_COMMIT_TAG =~ /^(?:\d+.){2}(?:\d+)$/ || $CI_COMMIT_REF_NAME == $CI_DEFAULT_BRANCH
      variables:
        SNAPSHOT_VERSION: "false"
    - if: $CI_PIPELINE_SOURCE == "web"
  artifacts:
    reports:
      dotenv: .env

🍺 Nouvelle release:
  stage: release
  image: registry.gitlab.com/gitlab-org/release-cli:latest
  script: echo "Nouvelle release $VERSION de la Blanquette de veau !!!"
  release:
    tag_name: $VERSION
    name: 'Release $VERSION'
    description: 'Release BlanquetteDeVeau-$VERSION'
    assets:
      links:
        - name: 'PlugOutBlanquetteDeVeau-$VERSION.jar'
          url: '$CI_SERVER_PROTOCOL://$CI_SERVER_FQDN/$CI_PROJECT_PATH/-/packages/'
  rules:
    - if: $CI_COMMIT_TAG
      when: never
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH

💥 Version plus heiiiinnn:
  stage: .post
  script:
    - | # Upgrade version X.X.X => X.X+1.0
      VERSION=$(mvn help:evaluate -Dexpression=project.version -q -DforceStdout)
      NEW_VERSION=$(echo $VERSION | awk -F. '{$NF = 0; $(NF-1) = $(NF-1) + 1; print $0}' OFS=.)
      mvn versions:set -DnewVersion=$NEW_VERSION
      COMMIT_MSG="💥 feat: Upgrade version to $NEW_VERSION [skip ci]"
    - | # Push without API
      RESULT=$(curl --request POST --form "branch=$CI_COMMIT_REF_NAME" --form "commit_message=$COMMIT_MSG" --form "start_branch=$CI_COMMIT_REF_NAME" --form "actions[][action]=update" --form "actions[][file_path]=pom.xml" --form "actions[][content]=<pom.xml" --header "PRIVATE-TOKEN: $BLANQUETTE_TOKEN" "$CI_API_V4_URL/projects/$CI_PROJECT_ID/repository/commits")
    - | # Check if the commit has been pushed (contains the commit message)
      if [[ "$RESULT" != *"$COMMIT_MSG"* ]]; then
        echo "💥 Version upgrade failed"
        exit 1
      fi
  rules:
    - if: $CI_COMMIT_TAG
      when: never
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH

##########################
## WORKFLOW
##########################

workflow:
  name: $PIPELINE_NAME
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
      variables:
        PIPELINE_NAME: 🧪 Petite vérification de la BlanquetteDeVeau
    - if: $CI_PIPELINE_SOURCE == "web" && $CI_COMMIT_REF_NAME != $CI_DEFAULT_BRANCH
      variables:
        PIPELINE_NAME: 🚜 Petite test MAMENE !
    - if: $CI_COMMIT_REF_NAME == $CI_DEFAULT_BRANCH
      variables:
        PIPELINE_NAME: 🍺 Travail bien travaillé ! 😎
